{"version":3,"sources":["components/AddCategory.jsx","components/GifItem.jsx","helpers/getGifs.js","components/ListCategory.jsx","hooks/useFetchGifs.js","components/GifExpert.jsx","App.js","serviceWorker.js","index.js"],"names":["AddCategory","setCategories","useState","value","setValue","onSubmit","e","preventDefault","trim","length","categories","type","onChange","target","GifItem","id","title","url","className","src","alt","getGifs","category","a","fetch","response","json","data","gifs","map","images","downsized_medium","ListCategory","loading","state","setState","useEffect","then","useFetchGifs","img","key","GifExpert","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"wOA2BeA,EAxBK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACfC,mBAAS,IADM,mBAClCC,EADkC,KAC3BC,EAD2B,KAazC,OACE,0BAAMC,SATa,SAACC,GACpBA,EAAEC,iBACEJ,EAAMK,OAAOC,OAAS,IACxBR,GAAc,SAACS,GAAD,OAAiBP,GAAjB,mBAA2BO,OACzCN,EAAS,OAMT,2BAAOO,KAAK,OAAOR,MAAOA,EAAOS,SAZhB,SAACN,GAAD,OAAOF,EAASE,EAAEO,OAAOV,YCKjCW,EATC,SAAC,GAAuB,EAArBC,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAC5B,OACE,yBAAKC,UAAU,QACb,yBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,2BAAIA,K,uBCNGK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfN,EADe,iDACiCK,EADjC,+DAGEE,MAAMP,GAHR,cAGfQ,EAHe,gBAIEA,EAASC,OAJX,uBAIbC,EAJa,EAIbA,KAEFC,EAAOD,EAAKE,KAAI,YAA4B,IAAzBd,EAAwB,EAAxBA,GAAIC,EAAoB,EAApBA,MAAOc,EAAa,EAAbA,OAClC,MAAO,CACLf,GAAIA,EACJC,MAAOA,EACPC,IAAG,OAAEa,QAAF,IAAEA,OAAF,EAAEA,EAAQC,iBAAiBd,QAVb,kBAcdW,GAdc,4CAAH,sDCgBLI,EAZM,SAAC,GAAkB,IAAD,ECDX,SAACV,GAAc,IAAD,EACdpB,mBAAS,CAAEyB,KAAM,GAAIM,SAAS,IADhB,mBACjCC,EADiC,KAC1BC,EAD0B,KAOxC,OAJAC,qBAAU,WACRf,EAAQC,GAAUe,MAAK,SAACT,GAAD,OAAUO,EAAS,CAAER,KAAMC,EAAMK,SAAS,SAChE,CAACX,IAEGY,EDL2BI,CADG,EAAfhB,UACdW,EAD6B,EAC7BA,QAAeH,EADc,EACpBH,KAEjB,OACE,oCACGM,EACG,cACAH,EAAOD,KAAI,SAACU,GAAD,OAAS,kBAAC,EAAD,eAASC,IAAKD,EAAIxB,IAAQwB,SEazCE,EApBG,WAAO,IAAD,EACcvC,mBAAS,CAAC,cADxB,mBACfQ,EADe,KACHT,EADG,KAGtB,OACE,yBAAKiB,UAAU,aACb,8CACA,6BACA,kBAAC,EAAD,CAAajB,cAAeA,IAC5B,6BACA,6BACA,wCACA,4BACGS,EAAWmB,KAAI,SAACP,GAAD,OACd,kBAAC,EAAD,CAAcA,SAAUA,EAAUkB,IAAKlB,UCLlCoB,MARf,WACE,OACE,yBAAKxB,UAAU,OACb,kBAAC,EAAD,QCKcyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.d1c910bb.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst AddCategory = ({ setCategories }) => {\n  const [value, setValue] = useState(\"\");\n\n  const handleChange = (e) => setValue(e.target.value);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (value.trim().length > 2) {\n      setCategories((categories) => [value, ...categories]);\n      setValue(\"\");\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type=\"text\" value={value} onChange={handleChange} />\n    </form>\n  );\n};\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n};\n\nexport default AddCategory;\n","import React from \"react\";\n\nconst GifItem = ({ id, title, url }) => {\n  return (\n    <div className=\"card\">\n      <img src={url} alt={title} />\n      <p>{title}</p>\n    </div>\n  );\n};\n\nexport default GifItem;\n","export const getGifs = async (category) => {\n  const url = `https://api.giphy.com/v1/gifs/search?q=${category}&limit=12&api_key=uuU6bmwAWCofaenTxcS6mduKzJVazy5U`;\n\n  const response = await fetch(url);\n  const { data } = await response.json();\n\n  const gifs = data.map(({ id, title, images }) => {\n    return {\n      id: id,\n      title: title,\n      url: images?.downsized_medium.url,\n    };\n  });\n\n  return gifs;\n};\n","import React from \"react\";\nimport GifItem from \"./GifItem\";\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\n\nconst ListCategory = ({ category }) => {\n  const { loading, data: images } = useFetchGifs(category);\n\n  return (\n    <>\n      {loading\n        ? \"Cargando...\"\n        : images.map((img) => <GifItem key={img.id} {...img} />)}\n    </>\n  );\n};\n\nexport default ListCategory;\n","import { useState, useEffect } from \"react\";\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = (category) => {\n  const [state, setState] = useState({ data: [], loading: true });\n\n  useEffect(() => {\n    getGifs(category).then((gifs) => setState({ data: gifs, loading: false }));\n  }, [category]);\n\n  return state;\n};\n","import React, { useState } from \"react\";\nimport AddCategory from \"./AddCategory\";\nimport ListCategory from \"./ListCategory\";\n\nconst GifExpert = () => {\n  const [categories, setCategories] = useState([\"xamurai x\"]);\n\n  return (\n    <div className=\"container\">\n      <h2>Git Expert App</h2>\n      <br />\n      <AddCategory setCategories={setCategories} />\n      <br />\n      <hr />\n      <h2>Category</h2>\n      <ol>\n        {categories.map((category) => (\n          <ListCategory category={category} key={category} />\n        ))}\n      </ol>\n    </div>\n  );\n};\n\nexport default GifExpert;\n","import React from \"react\";\nimport \"./App.css\";\nimport GifExpert from \"./components/GifExpert\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GifExpert />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}